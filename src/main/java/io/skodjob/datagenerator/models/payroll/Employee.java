/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.skodjob.datagenerator.models.payroll;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2495808458502106084L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"io.skodjob.datagenerator.models.payroll\",\"fields\":[{\"name\":\"employeeId\",\"type\":\"string\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"ssn\",\"type\":\"string\"},{\"name\":\"hourlyRate\",\"type\":\"float\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"company\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Employee> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Employee> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Employee> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Employee> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Employee> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Employee to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Employee from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Employee instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Employee fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence employeeId;
  private java.lang.CharSequence firstName;
  private java.lang.CharSequence lastName;
  private int age;
  private java.lang.CharSequence ssn;
  private float hourlyRate;
  private java.lang.CharSequence gender;
  private java.lang.CharSequence email;
  private java.lang.CharSequence company;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Employee() {}

  /**
   * All-args constructor.
   * @param employeeId The new value for employeeId
   * @param firstName The new value for firstName
   * @param lastName The new value for lastName
   * @param age The new value for age
   * @param ssn The new value for ssn
   * @param hourlyRate The new value for hourlyRate
   * @param gender The new value for gender
   * @param email The new value for email
   * @param company The new value for company
   */
  public Employee(java.lang.CharSequence employeeId, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.Integer age, java.lang.CharSequence ssn, java.lang.Float hourlyRate, java.lang.CharSequence gender, java.lang.CharSequence email, java.lang.CharSequence company) {
    this.employeeId = employeeId;
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
    this.ssn = ssn;
    this.hourlyRate = hourlyRate;
    this.gender = gender;
    this.email = email;
    this.company = company;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return employeeId;
    case 1: return firstName;
    case 2: return lastName;
    case 3: return age;
    case 4: return ssn;
    case 5: return hourlyRate;
    case 6: return gender;
    case 7: return email;
    case 8: return company;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: employeeId = (java.lang.CharSequence)value$; break;
    case 1: firstName = (java.lang.CharSequence)value$; break;
    case 2: lastName = (java.lang.CharSequence)value$; break;
    case 3: age = (java.lang.Integer)value$; break;
    case 4: ssn = (java.lang.CharSequence)value$; break;
    case 5: hourlyRate = (java.lang.Float)value$; break;
    case 6: gender = (java.lang.CharSequence)value$; break;
    case 7: email = (java.lang.CharSequence)value$; break;
    case 8: company = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'employeeId' field.
   * @return The value of the 'employeeId' field.
   */
  public java.lang.CharSequence getEmployeeId() {
    return employeeId;
  }


  /**
   * Sets the value of the 'employeeId' field.
   * @param value the value to set.
   */
  public void setEmployeeId(java.lang.CharSequence value) {
    this.employeeId = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public int getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(int value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'ssn' field.
   * @return The value of the 'ssn' field.
   */
  public java.lang.CharSequence getSsn() {
    return ssn;
  }


  /**
   * Sets the value of the 'ssn' field.
   * @param value the value to set.
   */
  public void setSsn(java.lang.CharSequence value) {
    this.ssn = value;
  }

  /**
   * Gets the value of the 'hourlyRate' field.
   * @return The value of the 'hourlyRate' field.
   */
  public float getHourlyRate() {
    return hourlyRate;
  }


  /**
   * Sets the value of the 'hourlyRate' field.
   * @param value the value to set.
   */
  public void setHourlyRate(float value) {
    this.hourlyRate = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * @return The value of the 'gender' field.
   */
  public java.lang.CharSequence getGender() {
    return gender;
  }


  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.CharSequence value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'company' field.
   * @return The value of the 'company' field.
   */
  public java.lang.CharSequence getCompany() {
    return company;
  }


  /**
   * Sets the value of the 'company' field.
   * @param value the value to set.
   */
  public void setCompany(java.lang.CharSequence value) {
    this.company = value;
  }

  /**
   * Creates a new Employee RecordBuilder.
   * @return A new Employee RecordBuilder
   */
  public static io.skodjob.datagenerator.models.payroll.Employee.Builder newBuilder() {
    return new io.skodjob.datagenerator.models.payroll.Employee.Builder();
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employee RecordBuilder
   */
  public static io.skodjob.datagenerator.models.payroll.Employee.Builder newBuilder(io.skodjob.datagenerator.models.payroll.Employee.Builder other) {
    if (other == null) {
      return new io.skodjob.datagenerator.models.payroll.Employee.Builder();
    } else {
      return new io.skodjob.datagenerator.models.payroll.Employee.Builder(other);
    }
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Employee instance.
   * @param other The existing instance to copy.
   * @return A new Employee RecordBuilder
   */
  public static io.skodjob.datagenerator.models.payroll.Employee.Builder newBuilder(io.skodjob.datagenerator.models.payroll.Employee other) {
    if (other == null) {
      return new io.skodjob.datagenerator.models.payroll.Employee.Builder();
    } else {
      return new io.skodjob.datagenerator.models.payroll.Employee.Builder(other);
    }
  }

  /**
   * RecordBuilder for Employee instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
    implements org.apache.avro.data.RecordBuilder<Employee> {

    private java.lang.CharSequence employeeId;
    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private int age;
    private java.lang.CharSequence ssn;
    private float hourlyRate;
    private java.lang.CharSequence gender;
    private java.lang.CharSequence email;
    private java.lang.CharSequence company;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.skodjob.datagenerator.models.payroll.Employee.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.employeeId)) {
        this.employeeId = data().deepCopy(fields()[0].schema(), other.employeeId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.ssn)) {
        this.ssn = data().deepCopy(fields()[4].schema(), other.ssn);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.hourlyRate)) {
        this.hourlyRate = data().deepCopy(fields()[5].schema(), other.hourlyRate);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.gender)) {
        this.gender = data().deepCopy(fields()[6].schema(), other.gender);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.email)) {
        this.email = data().deepCopy(fields()[7].schema(), other.email);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.company)) {
        this.company = data().deepCopy(fields()[8].schema(), other.company);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing Employee instance
     * @param other The existing instance to copy.
     */
    private Builder(io.skodjob.datagenerator.models.payroll.Employee other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.employeeId)) {
        this.employeeId = data().deepCopy(fields()[0].schema(), other.employeeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ssn)) {
        this.ssn = data().deepCopy(fields()[4].schema(), other.ssn);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hourlyRate)) {
        this.hourlyRate = data().deepCopy(fields()[5].schema(), other.hourlyRate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gender)) {
        this.gender = data().deepCopy(fields()[6].schema(), other.gender);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.email)) {
        this.email = data().deepCopy(fields()[7].schema(), other.email);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.company)) {
        this.company = data().deepCopy(fields()[8].schema(), other.company);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'employeeId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmployeeId() {
      return employeeId;
    }


    /**
      * Sets the value of the 'employeeId' field.
      * @param value The value of 'employeeId'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder setEmployeeId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.employeeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'employeeId' field has been set.
      * @return True if the 'employeeId' field has been set, false otherwise.
      */
    public boolean hasEmployeeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'employeeId' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder clearEmployeeId() {
      employeeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.firstName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lastName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public int getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder setAge(int value) {
      validate(fields()[3], value);
      this.age = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder clearAge() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssn' field.
      * @return The value.
      */
    public java.lang.CharSequence getSsn() {
      return ssn;
    }


    /**
      * Sets the value of the 'ssn' field.
      * @param value The value of 'ssn'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder setSsn(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.ssn = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ssn' field has been set.
      * @return True if the 'ssn' field has been set, false otherwise.
      */
    public boolean hasSsn() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ssn' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder clearSsn() {
      ssn = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'hourlyRate' field.
      * @return The value.
      */
    public float getHourlyRate() {
      return hourlyRate;
    }


    /**
      * Sets the value of the 'hourlyRate' field.
      * @param value The value of 'hourlyRate'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder setHourlyRate(float value) {
      validate(fields()[5], value);
      this.hourlyRate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'hourlyRate' field has been set.
      * @return True if the 'hourlyRate' field has been set, false otherwise.
      */
    public boolean hasHourlyRate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'hourlyRate' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder clearHourlyRate() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public java.lang.CharSequence getGender() {
      return gender;
    }


    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder setGender(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.gender = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder clearGender() {
      gender = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.email = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder clearEmail() {
      email = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'company' field.
      * @return The value.
      */
    public java.lang.CharSequence getCompany() {
      return company;
    }


    /**
      * Sets the value of the 'company' field.
      * @param value The value of 'company'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder setCompany(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.company = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'company' field has been set.
      * @return True if the 'company' field has been set, false otherwise.
      */
    public boolean hasCompany() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'company' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.payroll.Employee.Builder clearCompany() {
      company = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Employee build() {
      try {
        Employee record = new Employee();
        record.employeeId = fieldSetFlags()[0] ? this.employeeId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.firstName = fieldSetFlags()[1] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lastName = fieldSetFlags()[2] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.age = fieldSetFlags()[3] ? this.age : (java.lang.Integer) defaultValue(fields()[3]);
        record.ssn = fieldSetFlags()[4] ? this.ssn : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.hourlyRate = fieldSetFlags()[5] ? this.hourlyRate : (java.lang.Float) defaultValue(fields()[5]);
        record.gender = fieldSetFlags()[6] ? this.gender : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.email = fieldSetFlags()[7] ? this.email : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.company = fieldSetFlags()[8] ? this.company : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Employee>
    WRITER$ = (org.apache.avro.io.DatumWriter<Employee>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Employee>
    READER$ = (org.apache.avro.io.DatumReader<Employee>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.employeeId);

    out.writeString(this.firstName);

    out.writeString(this.lastName);

    out.writeInt(this.age);

    out.writeString(this.ssn);

    out.writeFloat(this.hourlyRate);

    out.writeString(this.gender);

    out.writeString(this.email);

    out.writeString(this.company);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.employeeId = in.readString(this.employeeId instanceof Utf8 ? (Utf8)this.employeeId : null);

      this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);

      this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);

      this.age = in.readInt();

      this.ssn = in.readString(this.ssn instanceof Utf8 ? (Utf8)this.ssn : null);

      this.hourlyRate = in.readFloat();

      this.gender = in.readString(this.gender instanceof Utf8 ? (Utf8)this.gender : null);

      this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);

      this.company = in.readString(this.company instanceof Utf8 ? (Utf8)this.company : null);

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.employeeId = in.readString(this.employeeId instanceof Utf8 ? (Utf8)this.employeeId : null);
          break;

        case 1:
          this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);
          break;

        case 2:
          this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);
          break;

        case 3:
          this.age = in.readInt();
          break;

        case 4:
          this.ssn = in.readString(this.ssn instanceof Utf8 ? (Utf8)this.ssn : null);
          break;

        case 5:
          this.hourlyRate = in.readFloat();
          break;

        case 6:
          this.gender = in.readString(this.gender instanceof Utf8 ? (Utf8)this.gender : null);
          break;

        case 7:
          this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          break;

        case 8:
          this.company = in.readString(this.company instanceof Utf8 ? (Utf8)this.company : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










