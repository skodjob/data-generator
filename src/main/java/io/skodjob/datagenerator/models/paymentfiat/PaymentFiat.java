/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.skodjob.datagenerator.models.paymentfiat;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentFiat extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4555590429550840016L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentFiat\",\"namespace\":\"io.skodjob.datagenerator.models.paymentfiat\",\"fields\":[{\"name\":\"paymentDetails\",\"type\":{\"type\":\"record\",\"name\":\"PaymentDetails\",\"fields\":[{\"name\":\"transactionId\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"}]}},{\"name\":\"payer\",\"type\":{\"type\":\"record\",\"name\":\"Payer\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"payerType\",\"type\":\"string\"},{\"name\":\"accountNumber\",\"type\":\"string\"},{\"name\":\"bank\",\"type\":\"string\"},{\"name\":\"billingAddress\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"street\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"postalCode\",\"type\":\"string\"}]}},{\"name\":\"cardNumber\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"cardType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"expiryDate\",\"type\":[\"null\",\"string\"],\"default\":null}]}},{\"name\":\"payee\",\"type\":{\"type\":\"record\",\"name\":\"Payee\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"payeeType\",\"type\":\"string\"},{\"name\":\"accountNumber\",\"type\":\"string\"},{\"name\":\"bank\",\"type\":\"string\"},{\"name\":\"address\",\"type\":\"Address\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentFiat> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentFiat> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentFiat> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentFiat> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentFiat> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentFiat to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentFiat from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentFiat instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentFiat fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private io.skodjob.datagenerator.models.paymentfiat.PaymentDetails paymentDetails;
  private io.skodjob.datagenerator.models.paymentfiat.Payer payer;
  private io.skodjob.datagenerator.models.paymentfiat.Payee payee;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentFiat() {}

  /**
   * All-args constructor.
   * @param paymentDetails The new value for paymentDetails
   * @param payer The new value for payer
   * @param payee The new value for payee
   */
  public PaymentFiat(io.skodjob.datagenerator.models.paymentfiat.PaymentDetails paymentDetails, io.skodjob.datagenerator.models.paymentfiat.Payer payer, io.skodjob.datagenerator.models.paymentfiat.Payee payee) {
    this.paymentDetails = paymentDetails;
    this.payer = payer;
    this.payee = payee;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return paymentDetails;
    case 1: return payer;
    case 2: return payee;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: paymentDetails = (io.skodjob.datagenerator.models.paymentfiat.PaymentDetails)value$; break;
    case 1: payer = (io.skodjob.datagenerator.models.paymentfiat.Payer)value$; break;
    case 2: payee = (io.skodjob.datagenerator.models.paymentfiat.Payee)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'paymentDetails' field.
   * @return The value of the 'paymentDetails' field.
   */
  public io.skodjob.datagenerator.models.paymentfiat.PaymentDetails getPaymentDetails() {
    return paymentDetails;
  }


  /**
   * Sets the value of the 'paymentDetails' field.
   * @param value the value to set.
   */
  public void setPaymentDetails(io.skodjob.datagenerator.models.paymentfiat.PaymentDetails value) {
    this.paymentDetails = value;
  }

  /**
   * Gets the value of the 'payer' field.
   * @return The value of the 'payer' field.
   */
  public io.skodjob.datagenerator.models.paymentfiat.Payer getPayer() {
    return payer;
  }


  /**
   * Sets the value of the 'payer' field.
   * @param value the value to set.
   */
  public void setPayer(io.skodjob.datagenerator.models.paymentfiat.Payer value) {
    this.payer = value;
  }

  /**
   * Gets the value of the 'payee' field.
   * @return The value of the 'payee' field.
   */
  public io.skodjob.datagenerator.models.paymentfiat.Payee getPayee() {
    return payee;
  }


  /**
   * Sets the value of the 'payee' field.
   * @param value the value to set.
   */
  public void setPayee(io.skodjob.datagenerator.models.paymentfiat.Payee value) {
    this.payee = value;
  }

  /**
   * Creates a new PaymentFiat RecordBuilder.
   * @return A new PaymentFiat RecordBuilder
   */
  public static io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder newBuilder() {
    return new io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder();
  }

  /**
   * Creates a new PaymentFiat RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentFiat RecordBuilder
   */
  public static io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder newBuilder(io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder other) {
    if (other == null) {
      return new io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder();
    } else {
      return new io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder(other);
    }
  }

  /**
   * Creates a new PaymentFiat RecordBuilder by copying an existing PaymentFiat instance.
   * @param other The existing instance to copy.
   * @return A new PaymentFiat RecordBuilder
   */
  public static io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder newBuilder(io.skodjob.datagenerator.models.paymentfiat.PaymentFiat other) {
    if (other == null) {
      return new io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder();
    } else {
      return new io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentFiat instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentFiat>
    implements org.apache.avro.data.RecordBuilder<PaymentFiat> {

    private io.skodjob.datagenerator.models.paymentfiat.PaymentDetails paymentDetails;
    private io.skodjob.datagenerator.models.paymentfiat.PaymentDetails.Builder paymentDetailsBuilder;
    private io.skodjob.datagenerator.models.paymentfiat.Payer payer;
    private io.skodjob.datagenerator.models.paymentfiat.Payer.Builder payerBuilder;
    private io.skodjob.datagenerator.models.paymentfiat.Payee payee;
    private io.skodjob.datagenerator.models.paymentfiat.Payee.Builder payeeBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.paymentDetails)) {
        this.paymentDetails = data().deepCopy(fields()[0].schema(), other.paymentDetails);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasPaymentDetailsBuilder()) {
        this.paymentDetailsBuilder = io.skodjob.datagenerator.models.paymentfiat.PaymentDetails.newBuilder(other.getPaymentDetailsBuilder());
      }
      if (isValidValue(fields()[1], other.payer)) {
        this.payer = data().deepCopy(fields()[1].schema(), other.payer);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasPayerBuilder()) {
        this.payerBuilder = io.skodjob.datagenerator.models.paymentfiat.Payer.newBuilder(other.getPayerBuilder());
      }
      if (isValidValue(fields()[2], other.payee)) {
        this.payee = data().deepCopy(fields()[2].schema(), other.payee);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasPayeeBuilder()) {
        this.payeeBuilder = io.skodjob.datagenerator.models.paymentfiat.Payee.newBuilder(other.getPayeeBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentFiat instance
     * @param other The existing instance to copy.
     */
    private Builder(io.skodjob.datagenerator.models.paymentfiat.PaymentFiat other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.paymentDetails)) {
        this.paymentDetails = data().deepCopy(fields()[0].schema(), other.paymentDetails);
        fieldSetFlags()[0] = true;
      }
      this.paymentDetailsBuilder = null;
      if (isValidValue(fields()[1], other.payer)) {
        this.payer = data().deepCopy(fields()[1].schema(), other.payer);
        fieldSetFlags()[1] = true;
      }
      this.payerBuilder = null;
      if (isValidValue(fields()[2], other.payee)) {
        this.payee = data().deepCopy(fields()[2].schema(), other.payee);
        fieldSetFlags()[2] = true;
      }
      this.payeeBuilder = null;
    }

    /**
      * Gets the value of the 'paymentDetails' field.
      * @return The value.
      */
    public io.skodjob.datagenerator.models.paymentfiat.PaymentDetails getPaymentDetails() {
      return paymentDetails;
    }


    /**
      * Sets the value of the 'paymentDetails' field.
      * @param value The value of 'paymentDetails'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder setPaymentDetails(io.skodjob.datagenerator.models.paymentfiat.PaymentDetails value) {
      validate(fields()[0], value);
      this.paymentDetailsBuilder = null;
      this.paymentDetails = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentDetails' field has been set.
      * @return True if the 'paymentDetails' field has been set, false otherwise.
      */
    public boolean hasPaymentDetails() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'paymentDetails' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.skodjob.datagenerator.models.paymentfiat.PaymentDetails.Builder getPaymentDetailsBuilder() {
      if (paymentDetailsBuilder == null) {
        if (hasPaymentDetails()) {
          setPaymentDetailsBuilder(io.skodjob.datagenerator.models.paymentfiat.PaymentDetails.newBuilder(paymentDetails));
        } else {
          setPaymentDetailsBuilder(io.skodjob.datagenerator.models.paymentfiat.PaymentDetails.newBuilder());
        }
      }
      return paymentDetailsBuilder;
    }

    /**
     * Sets the Builder instance for the 'paymentDetails' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder setPaymentDetailsBuilder(io.skodjob.datagenerator.models.paymentfiat.PaymentDetails.Builder value) {
      clearPaymentDetails();
      paymentDetailsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'paymentDetails' field has an active Builder instance
     * @return True if the 'paymentDetails' field has an active Builder instance
     */
    public boolean hasPaymentDetailsBuilder() {
      return paymentDetailsBuilder != null;
    }

    /**
      * Clears the value of the 'paymentDetails' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder clearPaymentDetails() {
      paymentDetails = null;
      paymentDetailsBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'payer' field.
      * @return The value.
      */
    public io.skodjob.datagenerator.models.paymentfiat.Payer getPayer() {
      return payer;
    }


    /**
      * Sets the value of the 'payer' field.
      * @param value The value of 'payer'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder setPayer(io.skodjob.datagenerator.models.paymentfiat.Payer value) {
      validate(fields()[1], value);
      this.payerBuilder = null;
      this.payer = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'payer' field has been set.
      * @return True if the 'payer' field has been set, false otherwise.
      */
    public boolean hasPayer() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'payer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.skodjob.datagenerator.models.paymentfiat.Payer.Builder getPayerBuilder() {
      if (payerBuilder == null) {
        if (hasPayer()) {
          setPayerBuilder(io.skodjob.datagenerator.models.paymentfiat.Payer.newBuilder(payer));
        } else {
          setPayerBuilder(io.skodjob.datagenerator.models.paymentfiat.Payer.newBuilder());
        }
      }
      return payerBuilder;
    }

    /**
     * Sets the Builder instance for the 'payer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder setPayerBuilder(io.skodjob.datagenerator.models.paymentfiat.Payer.Builder value) {
      clearPayer();
      payerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payer' field has an active Builder instance
     * @return True if the 'payer' field has an active Builder instance
     */
    public boolean hasPayerBuilder() {
      return payerBuilder != null;
    }

    /**
      * Clears the value of the 'payer' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder clearPayer() {
      payer = null;
      payerBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'payee' field.
      * @return The value.
      */
    public io.skodjob.datagenerator.models.paymentfiat.Payee getPayee() {
      return payee;
    }


    /**
      * Sets the value of the 'payee' field.
      * @param value The value of 'payee'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder setPayee(io.skodjob.datagenerator.models.paymentfiat.Payee value) {
      validate(fields()[2], value);
      this.payeeBuilder = null;
      this.payee = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'payee' field has been set.
      * @return True if the 'payee' field has been set, false otherwise.
      */
    public boolean hasPayee() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'payee' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.skodjob.datagenerator.models.paymentfiat.Payee.Builder getPayeeBuilder() {
      if (payeeBuilder == null) {
        if (hasPayee()) {
          setPayeeBuilder(io.skodjob.datagenerator.models.paymentfiat.Payee.newBuilder(payee));
        } else {
          setPayeeBuilder(io.skodjob.datagenerator.models.paymentfiat.Payee.newBuilder());
        }
      }
      return payeeBuilder;
    }

    /**
     * Sets the Builder instance for the 'payee' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder setPayeeBuilder(io.skodjob.datagenerator.models.paymentfiat.Payee.Builder value) {
      clearPayee();
      payeeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payee' field has an active Builder instance
     * @return True if the 'payee' field has an active Builder instance
     */
    public boolean hasPayeeBuilder() {
      return payeeBuilder != null;
    }

    /**
      * Clears the value of the 'payee' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.paymentfiat.PaymentFiat.Builder clearPayee() {
      payee = null;
      payeeBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentFiat build() {
      try {
        PaymentFiat record = new PaymentFiat();
        if (paymentDetailsBuilder != null) {
          try {
            record.paymentDetails = this.paymentDetailsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("paymentDetails"));
            throw e;
          }
        } else {
          record.paymentDetails = fieldSetFlags()[0] ? this.paymentDetails : (io.skodjob.datagenerator.models.paymentfiat.PaymentDetails) defaultValue(fields()[0]);
        }
        if (payerBuilder != null) {
          try {
            record.payer = this.payerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("payer"));
            throw e;
          }
        } else {
          record.payer = fieldSetFlags()[1] ? this.payer : (io.skodjob.datagenerator.models.paymentfiat.Payer) defaultValue(fields()[1]);
        }
        if (payeeBuilder != null) {
          try {
            record.payee = this.payeeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("payee"));
            throw e;
          }
        } else {
          record.payee = fieldSetFlags()[2] ? this.payee : (io.skodjob.datagenerator.models.paymentfiat.Payee) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentFiat>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentFiat>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentFiat>
    READER$ = (org.apache.avro.io.DatumReader<PaymentFiat>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.paymentDetails.customEncode(out);

    this.payer.customEncode(out);

    this.payee.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.paymentDetails == null) {
        this.paymentDetails = new io.skodjob.datagenerator.models.paymentfiat.PaymentDetails();
      }
      this.paymentDetails.customDecode(in);

      if (this.payer == null) {
        this.payer = new io.skodjob.datagenerator.models.paymentfiat.Payer();
      }
      this.payer.customDecode(in);

      if (this.payee == null) {
        this.payee = new io.skodjob.datagenerator.models.paymentfiat.Payee();
      }
      this.payee.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.paymentDetails == null) {
            this.paymentDetails = new io.skodjob.datagenerator.models.paymentfiat.PaymentDetails();
          }
          this.paymentDetails.customDecode(in);
          break;

        case 1:
          if (this.payer == null) {
            this.payer = new io.skodjob.datagenerator.models.paymentfiat.Payer();
          }
          this.payer.customDecode(in);
          break;

        case 2:
          if (this.payee == null) {
            this.payee = new io.skodjob.datagenerator.models.paymentfiat.Payee();
          }
          this.payee.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










