/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.skodjob.datagenerator.models.iotdevice;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PlugData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8358036197985024305L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlugData\",\"namespace\":\"io.skodjob.datagenerator.models.iotdevice\",\"fields\":[{\"name\":\"power\",\"type\":\"string\"},{\"name\":\"energy_current\",\"type\":{\"type\":\"record\",\"name\":\"EnergyCurrent\",\"fields\":[{\"name\":\"state\",\"type\":\"float\"},{\"name\":\"unit\",\"type\":\"string\"}]}},{\"name\":\"energy_today\",\"type\":{\"type\":\"record\",\"name\":\"EnergyToday\",\"fields\":[{\"name\":\"state\",\"type\":\"float\"},{\"name\":\"unit\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PlugData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlugData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PlugData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PlugData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PlugData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PlugData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PlugData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PlugData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PlugData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence power;
  private io.skodjob.datagenerator.models.iotdevice.EnergyCurrent energy_current;
  private io.skodjob.datagenerator.models.iotdevice.EnergyToday energy_today;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlugData() {}

  /**
   * All-args constructor.
   * @param power The new value for power
   * @param energy_current The new value for energy_current
   * @param energy_today The new value for energy_today
   */
  public PlugData(java.lang.CharSequence power, io.skodjob.datagenerator.models.iotdevice.EnergyCurrent energy_current, io.skodjob.datagenerator.models.iotdevice.EnergyToday energy_today) {
    this.power = power;
    this.energy_current = energy_current;
    this.energy_today = energy_today;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return power;
    case 1: return energy_current;
    case 2: return energy_today;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: power = (java.lang.CharSequence)value$; break;
    case 1: energy_current = (io.skodjob.datagenerator.models.iotdevice.EnergyCurrent)value$; break;
    case 2: energy_today = (io.skodjob.datagenerator.models.iotdevice.EnergyToday)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'power' field.
   * @return The value of the 'power' field.
   */
  public java.lang.CharSequence getPower() {
    return power;
  }


  /**
   * Sets the value of the 'power' field.
   * @param value the value to set.
   */
  public void setPower(java.lang.CharSequence value) {
    this.power = value;
  }

  /**
   * Gets the value of the 'energy_current' field.
   * @return The value of the 'energy_current' field.
   */
  public io.skodjob.datagenerator.models.iotdevice.EnergyCurrent getEnergyCurrent() {
    return energy_current;
  }


  /**
   * Sets the value of the 'energy_current' field.
   * @param value the value to set.
   */
  public void setEnergyCurrent(io.skodjob.datagenerator.models.iotdevice.EnergyCurrent value) {
    this.energy_current = value;
  }

  /**
   * Gets the value of the 'energy_today' field.
   * @return The value of the 'energy_today' field.
   */
  public io.skodjob.datagenerator.models.iotdevice.EnergyToday getEnergyToday() {
    return energy_today;
  }


  /**
   * Sets the value of the 'energy_today' field.
   * @param value the value to set.
   */
  public void setEnergyToday(io.skodjob.datagenerator.models.iotdevice.EnergyToday value) {
    this.energy_today = value;
  }

  /**
   * Creates a new PlugData RecordBuilder.
   * @return A new PlugData RecordBuilder
   */
  public static io.skodjob.datagenerator.models.iotdevice.PlugData.Builder newBuilder() {
    return new io.skodjob.datagenerator.models.iotdevice.PlugData.Builder();
  }

  /**
   * Creates a new PlugData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlugData RecordBuilder
   */
  public static io.skodjob.datagenerator.models.iotdevice.PlugData.Builder newBuilder(io.skodjob.datagenerator.models.iotdevice.PlugData.Builder other) {
    if (other == null) {
      return new io.skodjob.datagenerator.models.iotdevice.PlugData.Builder();
    } else {
      return new io.skodjob.datagenerator.models.iotdevice.PlugData.Builder(other);
    }
  }

  /**
   * Creates a new PlugData RecordBuilder by copying an existing PlugData instance.
   * @param other The existing instance to copy.
   * @return A new PlugData RecordBuilder
   */
  public static io.skodjob.datagenerator.models.iotdevice.PlugData.Builder newBuilder(io.skodjob.datagenerator.models.iotdevice.PlugData other) {
    if (other == null) {
      return new io.skodjob.datagenerator.models.iotdevice.PlugData.Builder();
    } else {
      return new io.skodjob.datagenerator.models.iotdevice.PlugData.Builder(other);
    }
  }

  /**
   * RecordBuilder for PlugData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlugData>
    implements org.apache.avro.data.RecordBuilder<PlugData> {

    private java.lang.CharSequence power;
    private io.skodjob.datagenerator.models.iotdevice.EnergyCurrent energy_current;
    private io.skodjob.datagenerator.models.iotdevice.EnergyCurrent.Builder energy_currentBuilder;
    private io.skodjob.datagenerator.models.iotdevice.EnergyToday energy_today;
    private io.skodjob.datagenerator.models.iotdevice.EnergyToday.Builder energy_todayBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.skodjob.datagenerator.models.iotdevice.PlugData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.power)) {
        this.power = data().deepCopy(fields()[0].schema(), other.power);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.energy_current)) {
        this.energy_current = data().deepCopy(fields()[1].schema(), other.energy_current);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasEnergyCurrentBuilder()) {
        this.energy_currentBuilder = io.skodjob.datagenerator.models.iotdevice.EnergyCurrent.newBuilder(other.getEnergyCurrentBuilder());
      }
      if (isValidValue(fields()[2], other.energy_today)) {
        this.energy_today = data().deepCopy(fields()[2].schema(), other.energy_today);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasEnergyTodayBuilder()) {
        this.energy_todayBuilder = io.skodjob.datagenerator.models.iotdevice.EnergyToday.newBuilder(other.getEnergyTodayBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing PlugData instance
     * @param other The existing instance to copy.
     */
    private Builder(io.skodjob.datagenerator.models.iotdevice.PlugData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.power)) {
        this.power = data().deepCopy(fields()[0].schema(), other.power);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.energy_current)) {
        this.energy_current = data().deepCopy(fields()[1].schema(), other.energy_current);
        fieldSetFlags()[1] = true;
      }
      this.energy_currentBuilder = null;
      if (isValidValue(fields()[2], other.energy_today)) {
        this.energy_today = data().deepCopy(fields()[2].schema(), other.energy_today);
        fieldSetFlags()[2] = true;
      }
      this.energy_todayBuilder = null;
    }

    /**
      * Gets the value of the 'power' field.
      * @return The value.
      */
    public java.lang.CharSequence getPower() {
      return power;
    }


    /**
      * Sets the value of the 'power' field.
      * @param value The value of 'power'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.iotdevice.PlugData.Builder setPower(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.power = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'power' field has been set.
      * @return True if the 'power' field has been set, false otherwise.
      */
    public boolean hasPower() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'power' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.iotdevice.PlugData.Builder clearPower() {
      power = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'energy_current' field.
      * @return The value.
      */
    public io.skodjob.datagenerator.models.iotdevice.EnergyCurrent getEnergyCurrent() {
      return energy_current;
    }


    /**
      * Sets the value of the 'energy_current' field.
      * @param value The value of 'energy_current'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.iotdevice.PlugData.Builder setEnergyCurrent(io.skodjob.datagenerator.models.iotdevice.EnergyCurrent value) {
      validate(fields()[1], value);
      this.energy_currentBuilder = null;
      this.energy_current = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'energy_current' field has been set.
      * @return True if the 'energy_current' field has been set, false otherwise.
      */
    public boolean hasEnergyCurrent() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'energy_current' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.skodjob.datagenerator.models.iotdevice.EnergyCurrent.Builder getEnergyCurrentBuilder() {
      if (energy_currentBuilder == null) {
        if (hasEnergyCurrent()) {
          setEnergyCurrentBuilder(io.skodjob.datagenerator.models.iotdevice.EnergyCurrent.newBuilder(energy_current));
        } else {
          setEnergyCurrentBuilder(io.skodjob.datagenerator.models.iotdevice.EnergyCurrent.newBuilder());
        }
      }
      return energy_currentBuilder;
    }

    /**
     * Sets the Builder instance for the 'energy_current' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.skodjob.datagenerator.models.iotdevice.PlugData.Builder setEnergyCurrentBuilder(io.skodjob.datagenerator.models.iotdevice.EnergyCurrent.Builder value) {
      clearEnergyCurrent();
      energy_currentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'energy_current' field has an active Builder instance
     * @return True if the 'energy_current' field has an active Builder instance
     */
    public boolean hasEnergyCurrentBuilder() {
      return energy_currentBuilder != null;
    }

    /**
      * Clears the value of the 'energy_current' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.iotdevice.PlugData.Builder clearEnergyCurrent() {
      energy_current = null;
      energy_currentBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'energy_today' field.
      * @return The value.
      */
    public io.skodjob.datagenerator.models.iotdevice.EnergyToday getEnergyToday() {
      return energy_today;
    }


    /**
      * Sets the value of the 'energy_today' field.
      * @param value The value of 'energy_today'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.iotdevice.PlugData.Builder setEnergyToday(io.skodjob.datagenerator.models.iotdevice.EnergyToday value) {
      validate(fields()[2], value);
      this.energy_todayBuilder = null;
      this.energy_today = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'energy_today' field has been set.
      * @return True if the 'energy_today' field has been set, false otherwise.
      */
    public boolean hasEnergyToday() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'energy_today' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.skodjob.datagenerator.models.iotdevice.EnergyToday.Builder getEnergyTodayBuilder() {
      if (energy_todayBuilder == null) {
        if (hasEnergyToday()) {
          setEnergyTodayBuilder(io.skodjob.datagenerator.models.iotdevice.EnergyToday.newBuilder(energy_today));
        } else {
          setEnergyTodayBuilder(io.skodjob.datagenerator.models.iotdevice.EnergyToday.newBuilder());
        }
      }
      return energy_todayBuilder;
    }

    /**
     * Sets the Builder instance for the 'energy_today' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.skodjob.datagenerator.models.iotdevice.PlugData.Builder setEnergyTodayBuilder(io.skodjob.datagenerator.models.iotdevice.EnergyToday.Builder value) {
      clearEnergyToday();
      energy_todayBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'energy_today' field has an active Builder instance
     * @return True if the 'energy_today' field has an active Builder instance
     */
    public boolean hasEnergyTodayBuilder() {
      return energy_todayBuilder != null;
    }

    /**
      * Clears the value of the 'energy_today' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.iotdevice.PlugData.Builder clearEnergyToday() {
      energy_today = null;
      energy_todayBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlugData build() {
      try {
        PlugData record = new PlugData();
        record.power = fieldSetFlags()[0] ? this.power : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (energy_currentBuilder != null) {
          try {
            record.energy_current = this.energy_currentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("energy_current"));
            throw e;
          }
        } else {
          record.energy_current = fieldSetFlags()[1] ? this.energy_current : (io.skodjob.datagenerator.models.iotdevice.EnergyCurrent) defaultValue(fields()[1]);
        }
        if (energy_todayBuilder != null) {
          try {
            record.energy_today = this.energy_todayBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("energy_today"));
            throw e;
          }
        } else {
          record.energy_today = fieldSetFlags()[2] ? this.energy_today : (io.skodjob.datagenerator.models.iotdevice.EnergyToday) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlugData>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlugData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlugData>
    READER$ = (org.apache.avro.io.DatumReader<PlugData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.power);

    this.energy_current.customEncode(out);

    this.energy_today.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.power = in.readString(this.power instanceof Utf8 ? (Utf8)this.power : null);

      if (this.energy_current == null) {
        this.energy_current = new io.skodjob.datagenerator.models.iotdevice.EnergyCurrent();
      }
      this.energy_current.customDecode(in);

      if (this.energy_today == null) {
        this.energy_today = new io.skodjob.datagenerator.models.iotdevice.EnergyToday();
      }
      this.energy_today.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.power = in.readString(this.power instanceof Utf8 ? (Utf8)this.power : null);
          break;

        case 1:
          if (this.energy_current == null) {
            this.energy_current = new io.skodjob.datagenerator.models.iotdevice.EnergyCurrent();
          }
          this.energy_current.customDecode(in);
          break;

        case 2:
          if (this.energy_today == null) {
            this.energy_today = new io.skodjob.datagenerator.models.iotdevice.EnergyToday();
          }
          this.energy_today.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










