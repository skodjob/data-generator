/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.skodjob.datagenerator.models.flights;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Flight extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4755920530450445103L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Flight\",\"namespace\":\"io.skodjob.datagenerator.models.flights\",\"fields\":[{\"name\":\"number\",\"type\":\"string\"},{\"name\":\"departure_airport\",\"type\":\"string\"},{\"name\":\"arrival_airport\",\"type\":\"string\"},{\"name\":\"departure_time\",\"type\":\"string\"},{\"name\":\"arrival_time\",\"type\":\"string\"},{\"name\":\"seat_number\",\"type\":\"string\"},{\"name\":\"gate\",\"type\":\"string\"},{\"name\":\"boarding_group\",\"type\":\"string\"},{\"name\":\"plane_model\",\"type\":\"string\"},{\"name\":\"airline\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Flight> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Flight> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Flight> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Flight> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Flight> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Flight to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Flight from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Flight instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Flight fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence number;
  private java.lang.CharSequence departure_airport;
  private java.lang.CharSequence arrival_airport;
  private java.lang.CharSequence departure_time;
  private java.lang.CharSequence arrival_time;
  private java.lang.CharSequence seat_number;
  private java.lang.CharSequence gate;
  private java.lang.CharSequence boarding_group;
  private java.lang.CharSequence plane_model;
  private java.lang.CharSequence airline;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Flight() {}

  /**
   * All-args constructor.
   * @param number The new value for number
   * @param departure_airport The new value for departure_airport
   * @param arrival_airport The new value for arrival_airport
   * @param departure_time The new value for departure_time
   * @param arrival_time The new value for arrival_time
   * @param seat_number The new value for seat_number
   * @param gate The new value for gate
   * @param boarding_group The new value for boarding_group
   * @param plane_model The new value for plane_model
   * @param airline The new value for airline
   */
  public Flight(java.lang.CharSequence number, java.lang.CharSequence departure_airport, java.lang.CharSequence arrival_airport, java.lang.CharSequence departure_time, java.lang.CharSequence arrival_time, java.lang.CharSequence seat_number, java.lang.CharSequence gate, java.lang.CharSequence boarding_group, java.lang.CharSequence plane_model, java.lang.CharSequence airline) {
    this.number = number;
    this.departure_airport = departure_airport;
    this.arrival_airport = arrival_airport;
    this.departure_time = departure_time;
    this.arrival_time = arrival_time;
    this.seat_number = seat_number;
    this.gate = gate;
    this.boarding_group = boarding_group;
    this.plane_model = plane_model;
    this.airline = airline;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return number;
    case 1: return departure_airport;
    case 2: return arrival_airport;
    case 3: return departure_time;
    case 4: return arrival_time;
    case 5: return seat_number;
    case 6: return gate;
    case 7: return boarding_group;
    case 8: return plane_model;
    case 9: return airline;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: number = (java.lang.CharSequence)value$; break;
    case 1: departure_airport = (java.lang.CharSequence)value$; break;
    case 2: arrival_airport = (java.lang.CharSequence)value$; break;
    case 3: departure_time = (java.lang.CharSequence)value$; break;
    case 4: arrival_time = (java.lang.CharSequence)value$; break;
    case 5: seat_number = (java.lang.CharSequence)value$; break;
    case 6: gate = (java.lang.CharSequence)value$; break;
    case 7: boarding_group = (java.lang.CharSequence)value$; break;
    case 8: plane_model = (java.lang.CharSequence)value$; break;
    case 9: airline = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'number' field.
   * @return The value of the 'number' field.
   */
  public java.lang.CharSequence getNumber() {
    return number;
  }


  /**
   * Sets the value of the 'number' field.
   * @param value the value to set.
   */
  public void setNumber(java.lang.CharSequence value) {
    this.number = value;
  }

  /**
   * Gets the value of the 'departure_airport' field.
   * @return The value of the 'departure_airport' field.
   */
  public java.lang.CharSequence getDepartureAirport() {
    return departure_airport;
  }


  /**
   * Sets the value of the 'departure_airport' field.
   * @param value the value to set.
   */
  public void setDepartureAirport(java.lang.CharSequence value) {
    this.departure_airport = value;
  }

  /**
   * Gets the value of the 'arrival_airport' field.
   * @return The value of the 'arrival_airport' field.
   */
  public java.lang.CharSequence getArrivalAirport() {
    return arrival_airport;
  }


  /**
   * Sets the value of the 'arrival_airport' field.
   * @param value the value to set.
   */
  public void setArrivalAirport(java.lang.CharSequence value) {
    this.arrival_airport = value;
  }

  /**
   * Gets the value of the 'departure_time' field.
   * @return The value of the 'departure_time' field.
   */
  public java.lang.CharSequence getDepartureTime() {
    return departure_time;
  }


  /**
   * Sets the value of the 'departure_time' field.
   * @param value the value to set.
   */
  public void setDepartureTime(java.lang.CharSequence value) {
    this.departure_time = value;
  }

  /**
   * Gets the value of the 'arrival_time' field.
   * @return The value of the 'arrival_time' field.
   */
  public java.lang.CharSequence getArrivalTime() {
    return arrival_time;
  }


  /**
   * Sets the value of the 'arrival_time' field.
   * @param value the value to set.
   */
  public void setArrivalTime(java.lang.CharSequence value) {
    this.arrival_time = value;
  }

  /**
   * Gets the value of the 'seat_number' field.
   * @return The value of the 'seat_number' field.
   */
  public java.lang.CharSequence getSeatNumber() {
    return seat_number;
  }


  /**
   * Sets the value of the 'seat_number' field.
   * @param value the value to set.
   */
  public void setSeatNumber(java.lang.CharSequence value) {
    this.seat_number = value;
  }

  /**
   * Gets the value of the 'gate' field.
   * @return The value of the 'gate' field.
   */
  public java.lang.CharSequence getGate() {
    return gate;
  }


  /**
   * Sets the value of the 'gate' field.
   * @param value the value to set.
   */
  public void setGate(java.lang.CharSequence value) {
    this.gate = value;
  }

  /**
   * Gets the value of the 'boarding_group' field.
   * @return The value of the 'boarding_group' field.
   */
  public java.lang.CharSequence getBoardingGroup() {
    return boarding_group;
  }


  /**
   * Sets the value of the 'boarding_group' field.
   * @param value the value to set.
   */
  public void setBoardingGroup(java.lang.CharSequence value) {
    this.boarding_group = value;
  }

  /**
   * Gets the value of the 'plane_model' field.
   * @return The value of the 'plane_model' field.
   */
  public java.lang.CharSequence getPlaneModel() {
    return plane_model;
  }


  /**
   * Sets the value of the 'plane_model' field.
   * @param value the value to set.
   */
  public void setPlaneModel(java.lang.CharSequence value) {
    this.plane_model = value;
  }

  /**
   * Gets the value of the 'airline' field.
   * @return The value of the 'airline' field.
   */
  public java.lang.CharSequence getAirline() {
    return airline;
  }


  /**
   * Sets the value of the 'airline' field.
   * @param value the value to set.
   */
  public void setAirline(java.lang.CharSequence value) {
    this.airline = value;
  }

  /**
   * Creates a new Flight RecordBuilder.
   * @return A new Flight RecordBuilder
   */
  public static io.skodjob.datagenerator.models.flights.Flight.Builder newBuilder() {
    return new io.skodjob.datagenerator.models.flights.Flight.Builder();
  }

  /**
   * Creates a new Flight RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Flight RecordBuilder
   */
  public static io.skodjob.datagenerator.models.flights.Flight.Builder newBuilder(io.skodjob.datagenerator.models.flights.Flight.Builder other) {
    if (other == null) {
      return new io.skodjob.datagenerator.models.flights.Flight.Builder();
    } else {
      return new io.skodjob.datagenerator.models.flights.Flight.Builder(other);
    }
  }

  /**
   * Creates a new Flight RecordBuilder by copying an existing Flight instance.
   * @param other The existing instance to copy.
   * @return A new Flight RecordBuilder
   */
  public static io.skodjob.datagenerator.models.flights.Flight.Builder newBuilder(io.skodjob.datagenerator.models.flights.Flight other) {
    if (other == null) {
      return new io.skodjob.datagenerator.models.flights.Flight.Builder();
    } else {
      return new io.skodjob.datagenerator.models.flights.Flight.Builder(other);
    }
  }

  /**
   * RecordBuilder for Flight instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Flight>
    implements org.apache.avro.data.RecordBuilder<Flight> {

    private java.lang.CharSequence number;
    private java.lang.CharSequence departure_airport;
    private java.lang.CharSequence arrival_airport;
    private java.lang.CharSequence departure_time;
    private java.lang.CharSequence arrival_time;
    private java.lang.CharSequence seat_number;
    private java.lang.CharSequence gate;
    private java.lang.CharSequence boarding_group;
    private java.lang.CharSequence plane_model;
    private java.lang.CharSequence airline;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.skodjob.datagenerator.models.flights.Flight.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.departure_airport)) {
        this.departure_airport = data().deepCopy(fields()[1].schema(), other.departure_airport);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.arrival_airport)) {
        this.arrival_airport = data().deepCopy(fields()[2].schema(), other.arrival_airport);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.departure_time)) {
        this.departure_time = data().deepCopy(fields()[3].schema(), other.departure_time);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.arrival_time)) {
        this.arrival_time = data().deepCopy(fields()[4].schema(), other.arrival_time);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.seat_number)) {
        this.seat_number = data().deepCopy(fields()[5].schema(), other.seat_number);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.gate)) {
        this.gate = data().deepCopy(fields()[6].schema(), other.gate);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.boarding_group)) {
        this.boarding_group = data().deepCopy(fields()[7].schema(), other.boarding_group);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.plane_model)) {
        this.plane_model = data().deepCopy(fields()[8].schema(), other.plane_model);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.airline)) {
        this.airline = data().deepCopy(fields()[9].schema(), other.airline);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing Flight instance
     * @param other The existing instance to copy.
     */
    private Builder(io.skodjob.datagenerator.models.flights.Flight other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.departure_airport)) {
        this.departure_airport = data().deepCopy(fields()[1].schema(), other.departure_airport);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.arrival_airport)) {
        this.arrival_airport = data().deepCopy(fields()[2].schema(), other.arrival_airport);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.departure_time)) {
        this.departure_time = data().deepCopy(fields()[3].schema(), other.departure_time);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.arrival_time)) {
        this.arrival_time = data().deepCopy(fields()[4].schema(), other.arrival_time);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.seat_number)) {
        this.seat_number = data().deepCopy(fields()[5].schema(), other.seat_number);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gate)) {
        this.gate = data().deepCopy(fields()[6].schema(), other.gate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.boarding_group)) {
        this.boarding_group = data().deepCopy(fields()[7].schema(), other.boarding_group);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.plane_model)) {
        this.plane_model = data().deepCopy(fields()[8].schema(), other.plane_model);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.airline)) {
        this.airline = data().deepCopy(fields()[9].schema(), other.airline);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'number' field.
      * @return The value.
      */
    public java.lang.CharSequence getNumber() {
      return number;
    }


    /**
      * Sets the value of the 'number' field.
      * @param value The value of 'number'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder setNumber(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.number = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'number' field has been set.
      * @return True if the 'number' field has been set, false otherwise.
      */
    public boolean hasNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'number' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder clearNumber() {
      number = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'departure_airport' field.
      * @return The value.
      */
    public java.lang.CharSequence getDepartureAirport() {
      return departure_airport;
    }


    /**
      * Sets the value of the 'departure_airport' field.
      * @param value The value of 'departure_airport'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder setDepartureAirport(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.departure_airport = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'departure_airport' field has been set.
      * @return True if the 'departure_airport' field has been set, false otherwise.
      */
    public boolean hasDepartureAirport() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'departure_airport' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder clearDepartureAirport() {
      departure_airport = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrival_airport' field.
      * @return The value.
      */
    public java.lang.CharSequence getArrivalAirport() {
      return arrival_airport;
    }


    /**
      * Sets the value of the 'arrival_airport' field.
      * @param value The value of 'arrival_airport'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder setArrivalAirport(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.arrival_airport = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'arrival_airport' field has been set.
      * @return True if the 'arrival_airport' field has been set, false otherwise.
      */
    public boolean hasArrivalAirport() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'arrival_airport' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder clearArrivalAirport() {
      arrival_airport = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'departure_time' field.
      * @return The value.
      */
    public java.lang.CharSequence getDepartureTime() {
      return departure_time;
    }


    /**
      * Sets the value of the 'departure_time' field.
      * @param value The value of 'departure_time'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder setDepartureTime(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.departure_time = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'departure_time' field has been set.
      * @return True if the 'departure_time' field has been set, false otherwise.
      */
    public boolean hasDepartureTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'departure_time' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder clearDepartureTime() {
      departure_time = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrival_time' field.
      * @return The value.
      */
    public java.lang.CharSequence getArrivalTime() {
      return arrival_time;
    }


    /**
      * Sets the value of the 'arrival_time' field.
      * @param value The value of 'arrival_time'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder setArrivalTime(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.arrival_time = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'arrival_time' field has been set.
      * @return True if the 'arrival_time' field has been set, false otherwise.
      */
    public boolean hasArrivalTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'arrival_time' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder clearArrivalTime() {
      arrival_time = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'seat_number' field.
      * @return The value.
      */
    public java.lang.CharSequence getSeatNumber() {
      return seat_number;
    }


    /**
      * Sets the value of the 'seat_number' field.
      * @param value The value of 'seat_number'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder setSeatNumber(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.seat_number = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'seat_number' field has been set.
      * @return True if the 'seat_number' field has been set, false otherwise.
      */
    public boolean hasSeatNumber() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'seat_number' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder clearSeatNumber() {
      seat_number = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'gate' field.
      * @return The value.
      */
    public java.lang.CharSequence getGate() {
      return gate;
    }


    /**
      * Sets the value of the 'gate' field.
      * @param value The value of 'gate'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder setGate(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.gate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'gate' field has been set.
      * @return True if the 'gate' field has been set, false otherwise.
      */
    public boolean hasGate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'gate' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder clearGate() {
      gate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'boarding_group' field.
      * @return The value.
      */
    public java.lang.CharSequence getBoardingGroup() {
      return boarding_group;
    }


    /**
      * Sets the value of the 'boarding_group' field.
      * @param value The value of 'boarding_group'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder setBoardingGroup(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.boarding_group = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'boarding_group' field has been set.
      * @return True if the 'boarding_group' field has been set, false otherwise.
      */
    public boolean hasBoardingGroup() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'boarding_group' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder clearBoardingGroup() {
      boarding_group = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'plane_model' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlaneModel() {
      return plane_model;
    }


    /**
      * Sets the value of the 'plane_model' field.
      * @param value The value of 'plane_model'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder setPlaneModel(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.plane_model = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'plane_model' field has been set.
      * @return True if the 'plane_model' field has been set, false otherwise.
      */
    public boolean hasPlaneModel() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'plane_model' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder clearPlaneModel() {
      plane_model = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'airline' field.
      * @return The value.
      */
    public java.lang.CharSequence getAirline() {
      return airline;
    }


    /**
      * Sets the value of the 'airline' field.
      * @param value The value of 'airline'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder setAirline(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.airline = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'airline' field has been set.
      * @return True if the 'airline' field has been set, false otherwise.
      */
    public boolean hasAirline() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'airline' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.Flight.Builder clearAirline() {
      airline = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Flight build() {
      try {
        Flight record = new Flight();
        record.number = fieldSetFlags()[0] ? this.number : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.departure_airport = fieldSetFlags()[1] ? this.departure_airport : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.arrival_airport = fieldSetFlags()[2] ? this.arrival_airport : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.departure_time = fieldSetFlags()[3] ? this.departure_time : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.arrival_time = fieldSetFlags()[4] ? this.arrival_time : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.seat_number = fieldSetFlags()[5] ? this.seat_number : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.gate = fieldSetFlags()[6] ? this.gate : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.boarding_group = fieldSetFlags()[7] ? this.boarding_group : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.plane_model = fieldSetFlags()[8] ? this.plane_model : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.airline = fieldSetFlags()[9] ? this.airline : (java.lang.CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Flight>
    WRITER$ = (org.apache.avro.io.DatumWriter<Flight>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Flight>
    READER$ = (org.apache.avro.io.DatumReader<Flight>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.number);

    out.writeString(this.departure_airport);

    out.writeString(this.arrival_airport);

    out.writeString(this.departure_time);

    out.writeString(this.arrival_time);

    out.writeString(this.seat_number);

    out.writeString(this.gate);

    out.writeString(this.boarding_group);

    out.writeString(this.plane_model);

    out.writeString(this.airline);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.number = in.readString(this.number instanceof Utf8 ? (Utf8)this.number : null);

      this.departure_airport = in.readString(this.departure_airport instanceof Utf8 ? (Utf8)this.departure_airport : null);

      this.arrival_airport = in.readString(this.arrival_airport instanceof Utf8 ? (Utf8)this.arrival_airport : null);

      this.departure_time = in.readString(this.departure_time instanceof Utf8 ? (Utf8)this.departure_time : null);

      this.arrival_time = in.readString(this.arrival_time instanceof Utf8 ? (Utf8)this.arrival_time : null);

      this.seat_number = in.readString(this.seat_number instanceof Utf8 ? (Utf8)this.seat_number : null);

      this.gate = in.readString(this.gate instanceof Utf8 ? (Utf8)this.gate : null);

      this.boarding_group = in.readString(this.boarding_group instanceof Utf8 ? (Utf8)this.boarding_group : null);

      this.plane_model = in.readString(this.plane_model instanceof Utf8 ? (Utf8)this.plane_model : null);

      this.airline = in.readString(this.airline instanceof Utf8 ? (Utf8)this.airline : null);

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.number = in.readString(this.number instanceof Utf8 ? (Utf8)this.number : null);
          break;

        case 1:
          this.departure_airport = in.readString(this.departure_airport instanceof Utf8 ? (Utf8)this.departure_airport : null);
          break;

        case 2:
          this.arrival_airport = in.readString(this.arrival_airport instanceof Utf8 ? (Utf8)this.arrival_airport : null);
          break;

        case 3:
          this.departure_time = in.readString(this.departure_time instanceof Utf8 ? (Utf8)this.departure_time : null);
          break;

        case 4:
          this.arrival_time = in.readString(this.arrival_time instanceof Utf8 ? (Utf8)this.arrival_time : null);
          break;

        case 5:
          this.seat_number = in.readString(this.seat_number instanceof Utf8 ? (Utf8)this.seat_number : null);
          break;

        case 6:
          this.gate = in.readString(this.gate instanceof Utf8 ? (Utf8)this.gate : null);
          break;

        case 7:
          this.boarding_group = in.readString(this.boarding_group instanceof Utf8 ? (Utf8)this.boarding_group : null);
          break;

        case 8:
          this.plane_model = in.readString(this.plane_model instanceof Utf8 ? (Utf8)this.plane_model : null);
          break;

        case 9:
          this.airline = in.readString(this.airline instanceof Utf8 ? (Utf8)this.airline : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










