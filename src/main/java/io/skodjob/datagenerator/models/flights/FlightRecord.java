/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.skodjob.datagenerator.models.flights;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FlightRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1649870568249374036L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FlightRecord\",\"namespace\":\"io.skodjob.datagenerator.models.flights\",\"fields\":[{\"name\":\"passenger\",\"type\":{\"type\":\"record\",\"name\":\"Passenger\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"passport_number\",\"type\":\"string\"},{\"name\":\"nationality\",\"type\":\"string\"}]}},{\"name\":\"flight\",\"type\":{\"type\":\"record\",\"name\":\"Flight\",\"fields\":[{\"name\":\"number\",\"type\":\"string\"},{\"name\":\"departure_airport\",\"type\":\"string\"},{\"name\":\"arrival_airport\",\"type\":\"string\"},{\"name\":\"departure_time\",\"type\":\"string\"},{\"name\":\"arrival_time\",\"type\":\"string\"},{\"name\":\"seat_number\",\"type\":\"string\"},{\"name\":\"gate\",\"type\":\"string\"},{\"name\":\"boarding_group\",\"type\":\"string\"},{\"name\":\"plane_model\",\"type\":\"string\"},{\"name\":\"airline\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FlightRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FlightRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FlightRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FlightRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FlightRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FlightRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FlightRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FlightRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FlightRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private io.skodjob.datagenerator.models.flights.Passenger passenger;
  private io.skodjob.datagenerator.models.flights.Flight flight;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FlightRecord() {}

  /**
   * All-args constructor.
   * @param passenger The new value for passenger
   * @param flight The new value for flight
   */
  public FlightRecord(io.skodjob.datagenerator.models.flights.Passenger passenger, io.skodjob.datagenerator.models.flights.Flight flight) {
    this.passenger = passenger;
    this.flight = flight;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return passenger;
    case 1: return flight;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: passenger = (io.skodjob.datagenerator.models.flights.Passenger)value$; break;
    case 1: flight = (io.skodjob.datagenerator.models.flights.Flight)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'passenger' field.
   * @return The value of the 'passenger' field.
   */
  public io.skodjob.datagenerator.models.flights.Passenger getPassenger() {
    return passenger;
  }


  /**
   * Sets the value of the 'passenger' field.
   * @param value the value to set.
   */
  public void setPassenger(io.skodjob.datagenerator.models.flights.Passenger value) {
    this.passenger = value;
  }

  /**
   * Gets the value of the 'flight' field.
   * @return The value of the 'flight' field.
   */
  public io.skodjob.datagenerator.models.flights.Flight getFlight() {
    return flight;
  }


  /**
   * Sets the value of the 'flight' field.
   * @param value the value to set.
   */
  public void setFlight(io.skodjob.datagenerator.models.flights.Flight value) {
    this.flight = value;
  }

  /**
   * Creates a new FlightRecord RecordBuilder.
   * @return A new FlightRecord RecordBuilder
   */
  public static io.skodjob.datagenerator.models.flights.FlightRecord.Builder newBuilder() {
    return new io.skodjob.datagenerator.models.flights.FlightRecord.Builder();
  }

  /**
   * Creates a new FlightRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FlightRecord RecordBuilder
   */
  public static io.skodjob.datagenerator.models.flights.FlightRecord.Builder newBuilder(io.skodjob.datagenerator.models.flights.FlightRecord.Builder other) {
    if (other == null) {
      return new io.skodjob.datagenerator.models.flights.FlightRecord.Builder();
    } else {
      return new io.skodjob.datagenerator.models.flights.FlightRecord.Builder(other);
    }
  }

  /**
   * Creates a new FlightRecord RecordBuilder by copying an existing FlightRecord instance.
   * @param other The existing instance to copy.
   * @return A new FlightRecord RecordBuilder
   */
  public static io.skodjob.datagenerator.models.flights.FlightRecord.Builder newBuilder(io.skodjob.datagenerator.models.flights.FlightRecord other) {
    if (other == null) {
      return new io.skodjob.datagenerator.models.flights.FlightRecord.Builder();
    } else {
      return new io.skodjob.datagenerator.models.flights.FlightRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for FlightRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FlightRecord>
    implements org.apache.avro.data.RecordBuilder<FlightRecord> {

    private io.skodjob.datagenerator.models.flights.Passenger passenger;
    private io.skodjob.datagenerator.models.flights.Passenger.Builder passengerBuilder;
    private io.skodjob.datagenerator.models.flights.Flight flight;
    private io.skodjob.datagenerator.models.flights.Flight.Builder flightBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.skodjob.datagenerator.models.flights.FlightRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.passenger)) {
        this.passenger = data().deepCopy(fields()[0].schema(), other.passenger);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasPassengerBuilder()) {
        this.passengerBuilder = io.skodjob.datagenerator.models.flights.Passenger.newBuilder(other.getPassengerBuilder());
      }
      if (isValidValue(fields()[1], other.flight)) {
        this.flight = data().deepCopy(fields()[1].schema(), other.flight);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasFlightBuilder()) {
        this.flightBuilder = io.skodjob.datagenerator.models.flights.Flight.newBuilder(other.getFlightBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing FlightRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(io.skodjob.datagenerator.models.flights.FlightRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.passenger)) {
        this.passenger = data().deepCopy(fields()[0].schema(), other.passenger);
        fieldSetFlags()[0] = true;
      }
      this.passengerBuilder = null;
      if (isValidValue(fields()[1], other.flight)) {
        this.flight = data().deepCopy(fields()[1].schema(), other.flight);
        fieldSetFlags()[1] = true;
      }
      this.flightBuilder = null;
    }

    /**
      * Gets the value of the 'passenger' field.
      * @return The value.
      */
    public io.skodjob.datagenerator.models.flights.Passenger getPassenger() {
      return passenger;
    }


    /**
      * Sets the value of the 'passenger' field.
      * @param value The value of 'passenger'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.FlightRecord.Builder setPassenger(io.skodjob.datagenerator.models.flights.Passenger value) {
      validate(fields()[0], value);
      this.passengerBuilder = null;
      this.passenger = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'passenger' field has been set.
      * @return True if the 'passenger' field has been set, false otherwise.
      */
    public boolean hasPassenger() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'passenger' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.skodjob.datagenerator.models.flights.Passenger.Builder getPassengerBuilder() {
      if (passengerBuilder == null) {
        if (hasPassenger()) {
          setPassengerBuilder(io.skodjob.datagenerator.models.flights.Passenger.newBuilder(passenger));
        } else {
          setPassengerBuilder(io.skodjob.datagenerator.models.flights.Passenger.newBuilder());
        }
      }
      return passengerBuilder;
    }

    /**
     * Sets the Builder instance for the 'passenger' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.skodjob.datagenerator.models.flights.FlightRecord.Builder setPassengerBuilder(io.skodjob.datagenerator.models.flights.Passenger.Builder value) {
      clearPassenger();
      passengerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'passenger' field has an active Builder instance
     * @return True if the 'passenger' field has an active Builder instance
     */
    public boolean hasPassengerBuilder() {
      return passengerBuilder != null;
    }

    /**
      * Clears the value of the 'passenger' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.FlightRecord.Builder clearPassenger() {
      passenger = null;
      passengerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'flight' field.
      * @return The value.
      */
    public io.skodjob.datagenerator.models.flights.Flight getFlight() {
      return flight;
    }


    /**
      * Sets the value of the 'flight' field.
      * @param value The value of 'flight'.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.FlightRecord.Builder setFlight(io.skodjob.datagenerator.models.flights.Flight value) {
      validate(fields()[1], value);
      this.flightBuilder = null;
      this.flight = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'flight' field has been set.
      * @return True if the 'flight' field has been set, false otherwise.
      */
    public boolean hasFlight() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'flight' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.skodjob.datagenerator.models.flights.Flight.Builder getFlightBuilder() {
      if (flightBuilder == null) {
        if (hasFlight()) {
          setFlightBuilder(io.skodjob.datagenerator.models.flights.Flight.newBuilder(flight));
        } else {
          setFlightBuilder(io.skodjob.datagenerator.models.flights.Flight.newBuilder());
        }
      }
      return flightBuilder;
    }

    /**
     * Sets the Builder instance for the 'flight' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.skodjob.datagenerator.models.flights.FlightRecord.Builder setFlightBuilder(io.skodjob.datagenerator.models.flights.Flight.Builder value) {
      clearFlight();
      flightBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'flight' field has an active Builder instance
     * @return True if the 'flight' field has an active Builder instance
     */
    public boolean hasFlightBuilder() {
      return flightBuilder != null;
    }

    /**
      * Clears the value of the 'flight' field.
      * @return This builder.
      */
    public io.skodjob.datagenerator.models.flights.FlightRecord.Builder clearFlight() {
      flight = null;
      flightBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FlightRecord build() {
      try {
        FlightRecord record = new FlightRecord();
        if (passengerBuilder != null) {
          try {
            record.passenger = this.passengerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("passenger"));
            throw e;
          }
        } else {
          record.passenger = fieldSetFlags()[0] ? this.passenger : (io.skodjob.datagenerator.models.flights.Passenger) defaultValue(fields()[0]);
        }
        if (flightBuilder != null) {
          try {
            record.flight = this.flightBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("flight"));
            throw e;
          }
        } else {
          record.flight = fieldSetFlags()[1] ? this.flight : (io.skodjob.datagenerator.models.flights.Flight) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FlightRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<FlightRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FlightRecord>
    READER$ = (org.apache.avro.io.DatumReader<FlightRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.passenger.customEncode(out);

    this.flight.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.passenger == null) {
        this.passenger = new io.skodjob.datagenerator.models.flights.Passenger();
      }
      this.passenger.customDecode(in);

      if (this.flight == null) {
        this.flight = new io.skodjob.datagenerator.models.flights.Flight();
      }
      this.flight.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.passenger == null) {
            this.passenger = new io.skodjob.datagenerator.models.flights.Passenger();
          }
          this.passenger.customDecode(in);
          break;

        case 1:
          if (this.flight == null) {
            this.flight = new io.skodjob.datagenerator.models.flights.Flight();
          }
          this.flight.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










